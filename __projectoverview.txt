Sprint 1 (Week 1): MilesLib Core Library
Objectives:
•	Build core modules:
o	log, config, exists, request, timer
•	Initialize Git repo, project structure, and internal test coverage
•	Establish logging + config file standards
Deliverables:
•	mileslib Python package with reusable utilities
•	Unit tests and pytest scaffold
•	Early CLI stub
________________________________________
Sprint 2 (Week 2): Project Scaffolding CLI
Objectives:
•	Build mileslib init command with:
o	Django scaffold (admin-ready, AAD auth)
o	FastAPI scaffold (async routes, Docker-ready)
o	PostgreSQL + shared config support
•	Inject .env, Dockerfile, basic readme
Deliverables:
•	mileslib init <name> --stack azure-hybrid
•	Template-based project generator
•	One-click local bootable backend stack
________________________________________
Sprint 3 (Week 3): Azure Deployment Pipeline
Objectives:
•	Azure App Services for Django + FastAPI
•	PostgreSQL config and connection via .env
•	Add TLS via Let’s Encrypt
•	Azure Front Door: path-based routing for /admin and /api
Deliverables:
•	Live staging site deployed from generated project
•	Internal deployment doc
•	CI/CD script draft (GitHub Actions or manual deploy)
________________________________________
Phase 2: Core Feature Implementation (Weeks 4–7)
________________________________________
Sprint 4 (Week 4): ZoomInfo API Integration
Objectives:
•	Create mileslib.zoominfo client:
o	enrich_lead, search_contacts, company_lookup
•	FastAPI endpoints:
o	POST /api/enrich_lead
o	POST /api/search_leads
•	Secure ZoomInfo API key in .env or Azure Key Vault
•	Extend Lead model with enrichment fields
Frontend:
•	Add "Enrich Lead" button in Django admin
•	Display company/org info in modal
Deliverables:
•	Fully working ZoomInfo integration
•	FastAPI + Django hook-ins
•	Sample enrichment and test records
________________________________________
Sprint 5 (Week 5): Models, Auth, UI Scaffolding
Objectives:
•	Django models: Lead, Activity, SalesResource, UserProfile
•	Azure AD login with django-auth-adfs
•	Base layout template (logo, navbar, profile menu)
•	Role-based permissions + groups
Deliverables:
•	Admin access with assigned permissions
•	Authenticated UI structure across roles
________________________________________
Sprint 6 (Week 6): Live Feed, Filtering, Metrics Panel
Objectives:
•	FastAPI endpoints:
o	/api/feed
o	/api/metrics
•	Filtering logic: by user, activity type, date
•	Sidebar data logic (top reps, total activities)
Frontend:
•	Polling-based activity feed
•	Filter bar (HTMX or AJAX)
•	Right panel metrics (Chart.js or basic templates)
Deliverables:
•	Dynamic dashboard homepage
•	Real-time updates + searchable feed
________________________________________
Sprint 7 (Week 7): Sales Dashboards + Activity Logging
Objectives:
•	User dashboard:
o	Daily agenda, assigned leads
o	Weekly activity summary
•	FastAPI endpoints:
o	POST /api/log_activity
•	Optional template fills (e.g., "Left voicemail")
Frontend:
•	Logging forms
•	Summary charts
•	Assigned leads quick actions
Deliverables:
•	Personal dashboards for reps
•	Lead interaction and timestamped notes
________________________________________
Sprint 8 (Week 8): Admin Tools + Resource Center
Objectives:
•	Admin dashboard:
o	Upload/edit/delete resources
o	CSV lead import + manual/auto assignment
o	KPIs + leaderboard view
•	FastAPI: /api/report, /api/leaderboard
•	Export: CSV + PDF (via WeasyPrint)
Frontend:
•	Admin-only controls
•	Resource library filters
•	“Used” tracking logic
Deliverables:
•	Fully functioning admin UI
•	Report export functionality
•	Resource usage analytics
________________________________________
Phase 3: QA, Security & Production Launch (Weeks 8–9)
________________________________________
Sprint 9 (Week 9): Internal QA + Hardening
Objectives:
•	Run:
o	Manual QA (lead logging, search, dashboard, metrics)
o	Security checklist (token auth, rate limits, endpoint control)
o	Azure firewall rules (restrict access to Front Door only)
•	Fix:
o	UI/UX bugs
o	API validation gaps
o	DB issues from enrichment or imports
Deliverables:
•	Stable, hardened MVP
•	Production lock-down complete
•	Feedback loop from internal testers
________________________________________
Sprint 10 (Week 10): Beta Feedback, Final Polish
Objectives:
•	Onboard users (sales, admin, manager roles)
•	Gather and apply internal feedback
•	Final documentation:
o	Admin guide
o	Internal SOPs
o	Endpoint summary
Deliverables:
•	Production deployment at app.phazebreak.com
•	Fully documented internal system
•	Sign-off-ready build\


SPRINT 1
Legend (Y) is completed, W is working, X is Not Done, ? is confused...', N is rejected/refactored, L is later

Day 1 (Monday): Project Initialization + Logging
Objective: Create the MilesLib repo and a working logging system.
Y	Create Git repo: mileslib/
Y	Set up folder structure:
Y	Write log.py:
Y	init_logger(log_path)
L	log.info, log.warning, log.error
N	Add log.txt test log file in logs/ folder
Y	Manual test: Log to file, validate timestamps and log levels
________________________________________
Day 2 (Tuesday): Config System + Path Utilities
Objective: Implement config loader and file/directory existence utilities.
Y	Create config.json default file with a few test keys
Y	Write mileslib/config.py:
Y	load_config(path)
N	validate_config(schema)
Y	Write exists.py:
Y	path_exists(path: Path, create_if_missing=False)
Y	Return consistent Path object
L	Add logging to config + path check routines
Y	Unit tests: config load success/fail, missing paths
________________________________________
Day 3 (Wednesday): Request Wrapper + Timer Utility
Objective: Build fault-tolerant request and performance timer utilities.
X	Write request.py:
X	http_get(url, retries=3)
X	http_post(url, data, retries=3)
X	Use requests with backoff + log failures
X	Write timer.py:
X	@timer(label="operation") decorator to log duration
X	Add tests:
X	Retry behavior
X	Timer output logs
________________________________________
Day 4 (Thursday): CLI Entrypoint + Pytest Scaffolding
Objective: Add command-line interface and unit test harness.
•	Create cli/__init__.py and __main__.py
o	Add mileslib init stub with argparse
o	Run dummy command: mileslib init testproject
•	Create tests/test_log.py, test_config.py
•	Add pytest.ini, install pytest
•	Run all core tests + fix failures
•	Commit: basic CLI and tested modules
________________________________________
Day 5 (Friday): Cleanup, Coverage, Docs
Objective: Polish week’s output, prep for Sprint 2 scaffolding work.
•	Add README.md with module usage and example logs
•	Add setup.py or pyproject.toml for packaging
•	Add .coveragerc + generate code coverage report
•	Create GitHub issues for any cleanup/improvements
•	Optional: publish to internal PyPI/testpypi

